#!/usr/bin/env perl
#
# pcre2bot â€” pcre2test IRC bot
#
# Copyright (c) 2025 ryoskzypu
# MIT-0 License. See LICENSE for details.
#
# Description:
#   IRC bot that listens to specific user commands in a IRC channel, sends them
#   to pcre2test, then runs regex tests and displays its results in the channel.
#
# Usage:
#   See 'pcre2bot --help'.
#
# Commands:
#   pcre2bot runs input commands prepended with a slash, e.g. /connect.
#
#   See https://metacpan.org/pod/POE::Component::IRC#INPUT-EVENTS for the complete
#   list of PoCo-IRC commands.
#
#   New commands:
#     /msg              alias of /privmsg
#     /reconnect        reconnect to the current connected server
#     /dumpstate        dump current IRC state info
#
#
# References:
#   https://www.rfc-editor.org/rfc/rfc1459
#   https://modern.ircdocs.horse/
#   https://en.wikipedia.org/wiki/IRC
#   https://www.perl.com/pub/2001/01/poe.html/
#   https://www.perl.com/pub/2004/07/02/poeintro.html/
#
# Contributors:
#   OnlineCop
#
# Aknowledgements:
#   - https://github.com/PCRE2Project/pcre2/
#   - https://metacpan.org/dist/POE
#   - https://metacpan.org/dist/POE-Component-IRC
#   - https://github.com/geirha/shbot
#   - https://github.com/perlbot/perlbuut
#   - https://wooledge.org/~greybot/
#   - https://github.com/troydm/shellbot
#   - BinGOs, Mathizen, and folks from #perl on Libera (vague, huf, Grinnz),
#     OnlineCop #regex on Libera.
#
# Notes:
#   - Unfortunately to get TLS support, POE::Component::SSLify has to be force
#     installed because it's failing the tests.
#     Net::SSLeay also is failing its tests.
#
#   - The NICKSERV_PASS environment variable can be set, so the script will prefer
#     it over the config file password.
#
#   - pcre2bot uses Unix convention of exit codes, i.e. 0 success, 1 general failure,
#     2 command-line usage error.
#
#   - Make sure to have enough disk space when enabling logging, because the logger
#     just writes to its files in append mode. Also the script has no logrotate
#     mechanism, so the user has to take care of files management.
#
# TODO:
#   - Study the IRC protocol basics.
#   - Study POE, and POE::Component::IRC, Mojo::IRC, AnyEvent::IRC.
#   - Study perlbot, shbot, and greybot to get ideias of useful features to implement.
#
#   - Add daemon functionality and find how the bot can be controled in background.
#
#   - Try to connect the bot with Tor. SOCKS5 is not supported, so maybe open a
#     feature issue to PoCo-IRC?
#     It seems Libera Chat only supports Tor with SASL, and PoCo-IRC does not
#     support SASL.
#
#   - Maybe add netcat support for pastebin services, so services that rely on
#     'nc' can be used.
#   - Add bash tab completions.
#
#   - Think of ways of securing the bot e.g. sandboxing using virtualization,
#     linux namespaces, containers, etc.
#
#   - Study ways of how the bot can be deployed in a server.
#   - After POE script is done, maybe try to reimplement it with another framework,
#     e.g. Mojo::IRC.
#
#   - Add an AUR pcre2bot package.

use v5.26.0;

use strict;
use warnings;
use open qw< :std :encoding(UTF-8) >;  # Encode STDIN, STDOUT and STDERR to UTF-8.

use I18N::Langinfo        qw< langinfo CODESET >;
use Encode                qw< decode >;
use File::Basename;
use Getopt::Long          qw< GetOptions :config gnu_getopt >;
use TOML::Tiny            qw< from_toml >;
use POE                   qw<
                              Wheel::Run
                              Wheel::ReadWrite
                              Wheel::ReadLine
                              Component::IRC
                              Component::IRC::State
                              Component::IRC::Plugin::NickServID
                              Component::IRC::Plugin::Connector
                              Component::IRC::Plugin::Logger
                              Component::Curl::Multi
                          >;
use HTTP::Request::Common qw< POST >;
use Data::Dumper          qw< Dumper >;
use POSIX                 qw< strftime >;

END { close STDOUT or die $! }

# Global variables

# Get the locale encoding and decode the command-line arguments.
{
    my $codeset = langinfo(CODESET);
    @ARGV = map { decode $codeset, $_ } @ARGV;
}

$|++;  # Disable STDOUT buffering.

my $prog     = basename $0;
my $prog_ver = '0.1';

# POE
my $irc;
my $readline;
my $curl;

# Handle warnings.
local $SIG{__WARN__} = sub {
    my ($msg) = @_;

    # Format warnings when POE's ReadLine is on, so they are shown correctly.
    if (defined $readline) {
        $msg =~ s/\n\z//;
        $readline->put($msg);
    } else {
        print $msg;
    }
};

my $usage = <<~"END";
    Usage: $prog [OPTION]... CONFIG_FILE
    pcre2test IRC bot
    IRC bot that listens to specific user commands in a IRC channel, sends them
    to pcre2test, then runs regex tests and displays its results in the channel.

    Options:
      -d, --debug              show debug information
      -h, --help               show this help and exit
      -p, --pass               accepts STDIN as NickServ password
      -v, --version            show version info and exit

    Examples:
      $prog -p CONFIG_FILE
    END

# Options
my $debug = 0;
my $pass  = 0;

# Configuration
my $config;
my $nickname          = '';
my $username          = '';
my $ircname           = '';
my $usermode          = '';
my $server            = '';
my $port              = '';
my $tls               = 0;
my $tls_cert          = '';
my $tls_key           = '';
my $log_path          = '';
my $log_private       = 0;
my $log_public        = 0;
my $nickserv_pass     = '';
my @channels          = ();
my @names_allow       = ();
my @names_ignore      = ();
my $def_pat_mods      = '';
my $def_subj_mods     = '';
my @pat_mods_allow    = ();
my @subj_mods_allow   = ();
my $max_lines         = '';
my $primary_service   = '';
my @fallback_services = ();

# Log filehandle
my $log_fh;

# pcre2bot's '~username@hostname' that IRC server sees.
my $fullname;

# pcre2test's output lines
my @lines;

# Regexes
my $pcre2_ver_rgx = qr/\APCRE2 version \d{2}+\.\d{2}+ \d{4}+-\d{2}+-\d{2}+\z/;
my $delimiter_rgx = qr{[/!"'`=_:;,%&@~-]}x;
my $mod_short_rgx = qr/\b(?> [agimnrsBI]++ | x{1,2}+)++\b/x;

# Flags
my $connected     = 0;  # Got connected to an IRC server.
my $was_connected = 0;  # Was "
my $conv_uniq     = 0;  # Unique conversion ('replace' modifier)
my $subj_literal  = 0;  # subject_literal modifier
my $no_service    = 0;  # Primary pastebin service

# Utils

# Handle pcre2bot errors
sub err
{
    my ($code, $msg) = @_;

    print STDERR "${prog}: ${msg}\n";
    exit $code;
}

# Auto-join channels
sub join_channels { $irc->yield(join => $_) foreach @channels }

# Print a message with a timestamp to STDOUT or log file.
sub plog
{
    my ($log_to_file, $get_date, $message) = @_;

    my ($date, $time) = split / /, (strftime '%Y-%m-%d %H:%M:%S ', localtime);
    my $new_msg       = ($get_date == 1 ? "$date $time $message" : "$time $message");

    $log_to_file == 1 ? print $log_fh "${new_msg}\n"
                      : $readline->put($new_msg);
}

# Print message to STDOUT and log it if config asks.
sub pmsg
{
    my ($msg) = @_;

    plog(0, 0, $msg);
    plog(1, 1, $msg) if $log_path ne '';
}

# Print debug message.
sub pdbg
{
    return unless $debug;
    my ($msg) = @_;

    $readline->put($msg);
}

# Print Dumper formated output.
sub pdump
{
    return unless $debug;

    my ($str, $ref) = @_;

    # Newlines need to be stripped to be correctly shown on POE's ReadLine output.
    $readline->put($_) foreach (split /\n/, "$str = " . Dumper $ref);
}

# Check if name (~username@host) is allowed to run bot commands.
sub is_name_allowed
{
    my ($name) = @_;

    # Allow list has priority over the ignore list.
    if (! @names_allow) {
        if (grep { $_ eq $name } @names_ignore) {
            pdbg "Ignored name '${name}' sent a message.";
            return 0;
        } else {
            pdbg "Name '${name}' sent a message.";
            return 1;
        }
    }

    if (grep { $_ eq $name } @names_allow) {
        pdbg "Allowed name '${name}' sent a message.";
        return 1;
    } else {
        pdbg "Blocked '${name}' sent a message.";
        return 0;
    }
}

# Event handlers

sub _start
{
    my $heap = $_[HEAP];

    if ($log_path ne '') {
        # Log IRC events related to pcre2bot that are not supported by PoCo-IRC
        # Logger plugin, in a non-blocking way.
        $heap->{readwrite} = POE::Wheel::ReadWrite->new(
            Handle     => $log_fh,
            InputEvent => 'rw_handle_input',
            ErrorEvent => 'rw_error_state',
        );

        # Log IRC public, private, notice, DCC, and CTCP ACTIONs messages.
        # Note that irc_join/part/quit/nick/kick/mode/topic messages are also logged.
        $irc->plugin_add('Logger', POE::Component::IRC::Plugin::Logger->new(
                Path    => $log_path,
                Private => $log_private,
                Public  => $log_public,
                DCC     => 1,
                Notices => 1,
        ));
    }

    # Initialize POE's ReadLine, so pcre2bot can run user IRC /commands from TTY.
    $readline = POE::Wheel::ReadLine->new(
        InputEvent => 'rl_handle_input',
    );
    $readline->get('> ');

    # Add tab completions to PoCo-IRC commands.
    my $attribs = $readline->attribs;
    $attribs->{completion_function} = sub {
        my ($text, $line, $start) = @_;

        return (
                   '/admin ',
                   '/away ',
                   '/cap ',
                   '/connect ',
                   '/ctcp ',
                   '/ctcpreply ',
                   '/dcc ',
                   '/dcc_accept ',
                   '/dcc_chat ',
                   '/dcc_close ',
                   '/dcc_resume ',
                   '/debug ',
                   '/dumpstate ',
                   '/die ',
                   '/info ',
                   '/invite ',
                   '/ison ',
                   '/join ',
                   '/kick ',
                   '/links ',
                   '/list ',
                   '/locops ',
                   '/mode ',
                   '/motd ',
                   '/msg ',
                   '/names ',
                   '/nick ',
                   '/nickserv ',
                   '/notice ',
                   '/oper ',
                   '/operwall ',
                   '/part ',
                   '/ping ',
                   '/pong ',
                   '/privmsg ',
                   '/quit ',
                   '/quote ',
                   '/register ',
                   '/rehash ',
                   '/remove ',
                   '/reconnect ',
                   '/restart ',
                   '/sconnect ',
                   '/servlist ',
                   '/shutdown ',
                   '/squery ',
                   '/squit ',
                   '/stats ',
                   '/summon ',
                   '/time ',
                   '/topic ',
                   '/trace ',
                   '/unregister ',
                   '/userhost ',
                   '/users ',
                   '/version ',
                   '/wallops ',
                   '/who ',
                   '/whois ',
                   '/whowas ',
                );
    };

    $irc->yield(register => 'all');
    #$irc->yield(connect  => {});

    return;
}

# Print registered PoCo-IRC events that are not handled by a subroutine, for debug info.
sub _default
{
    return unless $debug;

    my ($event, $args) = @_[ARG0 .. $#_];

    # Ignore events that are already handled by irc_raw* subroutines.
    if ($event =~ /
                      \A
                      irc_
                      (?>
                          \d{3}+
                          | bot_public
                          | cap
                          | notice
                          | ping
                          | snotice
                          | user_mode
                      )
                      \z
                  /x) {
        return;
    }

    my @output = ("${event}: ");

    foreach my $arg ($args->@*) {
        if (ref $arg eq 'ARRAY') {
            push @output, '[' . join(', ', $arg->@*) . ']';
        }
        elsif (ref $arg eq 'HASH') {
            push @output, '{' . join(', ', $arg->%*) . '}';
        }
        elsif (defined $arg) {
            push @output, "'${arg}'";
        }
    }

    plog(0, 0, "@output");
    return;
}

# Handle PoCo-Curl's HTTP requests responses.
sub _response
{
    my ($heap, $request_packet, $response_packet) = @_[HEAP, ARG0, ARG1];
    my $ret_code = $response_packet->[0]->{_rc};
    my $content  = $response_packet->[0]->{_content};
    $content =~ s/\n//;

    my $channel = $heap->{channel};
    my $nick    = $heap->{nick};
    my $input   = $heap->{input};
    my $url     = $primary_service;

    #pdump '$request_packet',  $request_packet;
    #pdump '$response_packet', $response_packet;

    pdbg "${ret_code}: '${content}'";

    # Success.
    if ($ret_code == 200) {
        $irc->yield(privmsg => $channel, "${nick}etc... ( $content )");
    }
    # Try a fallback service.
    else {
        if (! @fallback_services) {
            $irc->yield(privmsg => $channel, "failed to upload pcre2test's output to a pastebin service");
            return;
        }

        $url = shift @fallback_services;
        get_pastebin($input);
    }

    return;
}

# Handle POE's ReadWrite input events.
# Note that for some reason no input is getting caught by this handle.
sub rw_handle_input
{
    my ($input, $wheel_id) = @_[ARG0, ARG1];

    pdbg "Echoing input from wheel ${wheel_id}: ${input}.";
}

# Handle POE's ReadWrite error events.
# Note that for some reason this handler shows a 'Bad file descriptor' error event.
sub rw_error_state
{
    my ($operation, $errnum, $errstr, $id) = @_[ARG0..ARG3];

    if ($operation eq 'read' and $errnum == 0) {
        pdbg "EOF from wheel ${id}.";
    }
    else {
        warn "Wheel $id encountered $operation error ${errnum}: ${errstr}.\n";
    }

    delete $_[HEAP]{readwrite}{$id};  # Shut down that wheel.
}

# Handle POE's ReadLine input events.
sub rl_handle_input
{
    my ($kernel, $input, $exception) = @_[KERNEL, ARG0, ARG1];

    if (defined $input) {
        $readline->addhistory($input);
        rl_parse_input($input);
    }
    # Exit cleanly after Ctrl+c and Ctrl+d inputs.
    elsif ($exception =~ /\A(?> eot | interrupt)\z/x) {
        $irc->yield('shutdown');
    }

    $readline->get('> ') if $readline;
    return;
}

# Parse POE's ReadLine inputs to run /commands.
#
# Notes:
#   - The input strings are split by spaces, so mentions of 'arguments' means
#     strings that do not contain spaces, and plain 'string' is the opposite.
#
#   - For some reason part, quit and shutdown commands only send the optional
#     message argument to the server after being connected for some time.
#
#   - Since arguments are split by spaces, it can cause problems with dcc* commands,
#     because of filenames that contain spaces. This can be fixed, but pcre2bot
#     is not intended for DCC usage.
#
#   - Some commands that take N arguments like nickserv can accept passwords, so
#     a password will be parsed wrong if it contain spaces.
#     I'm not sure if all IRC servers accept spaces in nickserv passwords. It seems
#     that Libera does accept them in 'nickserv set password', 'nickserv identify',
#     but not in 'nickserv register'.
#
# TODO:
#   - Fix commands arguments in how they are passed. Every command accepts a
#     different number of args.
#   - Create a command to check what channels the bot is at. Look into PoCo-IRC-State.
#   - Check weechat useful commands to see if they can be added here.
sub rl_parse_input
{
    my ($input) = @_;

    if ($input =~ s|\A/||) {
        my (@args) = split / /, $input;
        my ($cmd)  = shift @args;

        pdump('@args', \@args);

        if ($cmd eq 'connect') {
            if ($irc->connected) {
                $readline->put("Already connected to $server");
            }
            else {
                $readline->put("Connecting to $server on port $port");
                $irc->yield('connect');
            }
        }
        # Dump IRC state info.
        elsif ($cmd eq 'dumpstate') {
            pdump('$state', $irc->{STATE});
        }
        # Commands that take 1 argument and a string.
        elsif ($cmd =~ /
                           \A
                           (?>
                               ctcpreply
                               | ctcp
                               | notice
                               |
                                 (?'msg'
                                     privmsg | msg
                                 )
                               | squery
                               | squit
                           )
                           \z
                       /x) {
            my $channel = shift @args;

            if (defined $+{msg}) {
                $irc->yield(privmsg => $channel => "@args")
            }
            else {
                $irc->yield($cmd => $channel => "@args");
            }
        }
        # Commands that take 2 arguments and a string.
        elsif ($cmd =~ /
                           \A
                           (?>
                               kick
                               | remove
                           )
                           \z
                       /x) {
            my $channel = shift @args;
            my $nick    = shift @args;

            $irc->yield($cmd => $channel => $nick => "@args");
        }
        # Commands that take a single string.
        elsif ($cmd =~ /
                           \A
                           (?>
                               away
                               | locops
                               | operwall
                               | quit
                               | quote
                               | mode
                               | wallops
                           )
                           \z
                       /x) {
            $irc->yield($cmd => "@args");
        }
        elsif ($cmd eq 'reconnect') {
            if ($irc->connected) {
                $readline->put("Reconnecting to $server on port $port");
                $irc->yield('connect');
            }
            else {
                $readline->put('Not connected to a server');
            }
        }
        elsif ($cmd eq 'topic') {
            my $channel = shift @args;

            if (@args) {
                # "" or '' unsets the topic.
                if ("@args" =~ /\A(?> "" | '')\z/x) {
                    $irc->yield($cmd => $channel => '');
                }
                # Set topic with args string.
                else {
                    $irc->yield($cmd => $channel => "@args");
                }
            } else {
                # Get the current topic.
                $irc->yield($cmd => $channel);
            }
        }
        # Without argument, do a whois on pcre2bot nick.
        elsif ($cmd eq 'whois') {
            if (@args) {
                $irc->yield($cmd => @args);
            } else {
                $irc->yield($cmd => $nickname);
            }
        }
        # Commands that take N arguments.
        else {
            $irc->yield($cmd => @args);
        }
    }

    return;
}

# Handle pcre2test's STDOUT events.
sub got_child_stdout
{
    my ($heap, $stdout_line, $wheel_id) = @_[HEAP, ARG0, ARG1];

    my $child     = $heap->{children_by_wid}{$wheel_id};
    my $child_pid = $child->PID;
    my $channel   = $heap->{channel};
    my $nick      = $heap->{nick};
    my $line_cnt  = scalar @lines;

    pdbg "PID $child_pid STDOUT: '${stdout_line}'";
    pdbg "\$line_cnt: ${line_cnt}";

    # Warn if pastebin primary service is not set.
    if ($primary_service eq '') {
        if (! $no_service && $line_cnt == $max_lines + 1) {
            $irc->yield(privmsg => $channel, "${nick}etc... ( primary pastebin service is not set )");
            $no_service = 1;

            return;
        }
        elsif ($no_service) {
            # Reset lines and flag on last line.
            if ($stdout_line eq '') {
                @lines      = ();
                $no_service = 0;
            }

            return;
        }
    }

    # Last output line.
    if ($stdout_line eq '') {
        # Send output to a pastebin service, if line count exceeds the limit.
        if ($line_cnt > $max_lines + 1) {
            my $input = join "\n", @lines;
            $heap->{input} = $input;

            get_pastebin($input);
        }

        # Reset
        @lines      = ();
        $conv_uniq  = 0;
        $no_service = 0;
    }
    else {
        # Convert back the escaped unique char to a comma. Note that pcre2test
        # also displays the unique '\034' char as a literal '\x{1c}' in hex notation.
        $stdout_line =~ s/\o{034} | \\x\{1c\}/,/gx if $conv_uniq;

        # Count all lines except the version line from command.
        push @lines, $stdout_line if $stdout_line !~ $pcre2_ver_rgx;

        # Ignore pcre2test's error/version messages.
        if ($stdout_line !~ /\A\*\* [^\n]++\z/ && $stdout_line !~ $pcre2_ver_rgx) {
            if ($heap->{trigger} =~ /\A(?> default | callouts)\z/x && $line_cnt < $max_lines + 1) {
                # Ignore the first 2 lines if the trigger is a default or callout,
                # because pattern/subject is already known to the user.
                return if $line_cnt =~ /\A[01]\z/;

                # Send output to the channel.
                $irc->yield(privmsg => $channel, "${nick}$stdout_line");
            }
            elsif ($heap->{trigger} =~ /\Averbose\z/ && $line_cnt < $max_lines - 1) {
                $irc->yield(privmsg => $channel, "${nick}$stdout_line");
            }
        } else {
            $irc->yield(privmsg => $channel, "${nick}$stdout_line");
        }
    }
}

# Handle pcre2test's STDERR events.
sub got_child_stderr
{
    my ($heap, $stderr_line, $wheel_id) = @_[HEAP, ARG0, ARG1];
    my $child     = $heap->{children_by_wid}{$wheel_id};
    my $child_pid = $child->PID;

    pdbg "PID $child_pid STDERR: '${stderr_line}'";
}

# Handle pcre2test's close events.
sub got_child_close
{
    my ($heap, $wheel_id) = @_[HEAP, ARG0];
    my $child     = delete $heap->{children_by_wid}{$wheel_id};
    my $child_pid = $child->PID;

    # May have been reaped by on_child_signal().
    if (! defined $child) {
        pdbg "WID $wheel_id closed all pipes.";
        return;
    }

    pdbg "PID $child_pid closed all pipes.";
    delete $heap->{children_by_pid}{$child_pid};
}

# Handle pcre2test's signal events.
sub got_child_signal
{
    my ($heap, undef, $child_pid, $status) = @_[HEAP, ARG0 .. ARG2];

    pdbg "PID $child_pid exited with status ${status}.";
    my $child = delete $heap->{children_by_pid}{$child_pid};

    # May have been reaped by on_child_close().
    return unless defined $child;
    delete $heap->{children_by_wid}{$child->ID};
}

# Events

# Print events received by the IRC server in original format.
sub irc_raw
{
    my $raw_msg = $_[ARG0];

    plog(0, 0, "->$raw_msg");
    return;
}

# Print events sent by the IRC server in original format.
sub irc_raw_out
{
    my $raw_out_msg = $_[ARG0];

    plog(0, 0, ">>> $raw_out_msg");
    return;
}

# Print and/or log when a connection to an IRC server is estabilished.
sub irc_connected
{
    my ($heap, $server) = @_[HEAP, ARG0];

    # Keep bot connected to the IRC server on disconnections.
    $heap->{connector} = POE::Component::IRC::Plugin::Connector->new;
    $irc->plugin_add('Connector' => $heap->{connector});

    if ($log_path ne '') {
        print $log_fh <<~_;
            ***
            *** LOGGING BEGINS
            ***
            _
    }

    pmsg "Connection to ${server} estabilished.";

    return;
}

# Server welcome message
# Note that this event is necessary to start sending commands to the server.
sub irc_001
{
    #my $heap   = $_[HEAP];
    my $server = $irc->server_name;

    $connected     = 1;
    $was_connected = 1;
    pmsg "Connected to ${server}.";

    # Identify to NickServ if a password is set.
    $irc->plugin_add('NickServID', POE::Component::IRC::Plugin::NickServID->new(
        'Password' => $nickserv_pass,
    )) if $nickserv_pass ne '' && $tls_cert eq '';

    $irc->yield(mode  => "$nickname $usermode") if $usermode ne '';
    $irc->yield(whois => $nickname)             if $nickserv_pass eq '';

    join_channels() if $nickserv_pass eq '';

    return;
}

# If a NickServ password is set, only join channels after the nick is identified,
# so the hostname is not exposed before a cloak is set on some servers (e.g. Libera
# Chat and OFTC).
sub irc_identified
{
    #my $heap = $_[HEAP];

    pmsg "$nickname is identified by NickServ, joining channels.";

    $irc->yield(whois => $nickname);
    join_channels();

    return;
}

# Query and log pcre2bot's WHOIS information after it connects to an IRC server.
sub irc_whois
{
    my $hashref = $_[ARG0];
    my $nick = $hashref->{nick};
    my $user = $hashref->{user};
    my $host = $hashref->{host};

    # ~username@hostname
    $fullname = "${user}\@$host";

    if ($connected) {
        if ($log_path ne '') {
            foreach my ($key, $val) ($hashref->%*) {
                plog(1, 1, "$key => $val");
            }
        }

        $connected = 0;
    }

    return;
}

# Log whenever pcre2bot changes its user mode and a channel mode.
sub irc_mode
{
    my ($who, $channel, $mode) = @_[ARG0 .. ARG2];
    my $mask = @_[ARG3 .. $#_] // '';
    my $nick = (split /!/, $who)[0];

    if ($nick eq $nickname && $log_path ne '') {
        plog(1, 1, "$nick changes usermode to ${mode}.")            if $channel eq $nickname;
        plog(1, 1, "$nick changes $channel mode to $mode ${mask}.") if $channel ne $nickname;
    }

    return;
}

# Log whenever pcre2bot joins a channel.
sub irc_join
{
    my ($who, $channel) = @_[ARG0, ARG1];
    my $nick = (split /!/, $who)[0];

    plog(1, 1, "$nick joins ${channel}.") if $nick eq $nickname && $log_path ne '';
    return;
}

# Log whenever pcre2bot leaves a channel.
sub irc_part
{
    my ($who, $channel) = @_[ARG0 .. ARG1];
    my $message = $_[ARG2] // '';
    my $nick    = (split /!/, $who)[0];

    plog(1, 1, "$nick leaves ${channel}: ${message}.") if $nick eq $nickname && $log_path ne '';
    return;
}

# Log whenever pcre2bot quits IRC (or gets KILLed).
sub irc_quit
{
    my ($who, $message) = @_[ARG0, ARG1];
    my $nick = (split /!/, $who)[0];

    if ($nick eq $nickname) {
        plog(1, 1, "$nick quits IRC: ${message}.") if $log_path ne '';

        # Do not reconnect bot on manual /quit.
        $irc->plugin_del('Connector');
    }

    return;
}

# Log whenever someone kicks pcre2bot from a channel.
sub irc_kick
{
    my ($kicker, $channel, $nick, $reason) = @_[ARG0 .. ARG3];

    plog(1, 1, "$kicker kicks $nickname from ${channel}: $reason.") if $nick eq $nickname && $log_path ne '';
    return;
}

# Update and log whenever pcre2bot changes its nick.
sub irc_nick
{
    my ($who, $new_nick) = @_[ARG0, ARG1];
    my $nick = (split /!/, $who)[0];

    $nickname = $new_nick if $who eq "${nickname}!$fullname";
    plog(1, 1, "$nick changes nick to ${new_nick}.") if $log_path ne '';

    return;
}

# Log whenever pcre2bot receives a CTCP query.
sub irc_ctcp
{
    my ($type, $who, $target) = @_[ARG0 .. ARG2];

    plog(1, 1, "$who sends a CTCP $type query to ${nickname}.") if $target->[0] eq $nickname && $log_path ne '';
    return;
}

# Log whenever someone invites pcre2bot to another channel.
sub irc_invite
{
    my ($who, $channel) = @_[ARG0, ARG1];

    plog(1, 1, "$who invites $nickname to ${channel}.") if $log_path ne '';
    return;
}

# Print and/or log when the IRC component has been asked to shutdown, and exit cleanly.
sub irc_shutdown
{
    my ($heap, $session_id) = @_[HEAP, ARG0];

    pmsg "Shutting down session ID ${session_id} and exiting." if $was_connected;

    $readline = '';
    delete $heap->{readwrite};

    exit 0;
}

# Print and/or log whenever a socket connection to an IRC server closes down.
sub irc_disconnected
{
    my $server = $_[ARG0];

    pmsg "Lost connection to ${server}.";
    return;
}

# Print and/or log whenever the IRC server sends an ERROR message.
sub irc_error
{
    my $err = $_[ARG0];

    pmsg "Server error occurred: ${err}.";
    return;
}

# Print and/or log when a connection could not be established to the IRC server.
sub irc_socketerr
{
    my $err = $_[ARG0];

    pmsg "Socket error occurred: ${err}.";
    return;
}

# Print and/or log when an error occurs while executing a plugin handler.
sub irc_plugin_error
{
    my ($err, $plugin_alias, $plugin_object) = @_[ARG0 .. ARG2];

    pmsg "Plugin '${plugin_alias}' error occurred: ${err}.";
    return;
}

# Reply to any PRIVMSG in channel that addresses the bot commands.
sub irc_public
{
    # :ryoskzypu!~ryoskzypu@user/ryoskzypu PRIVMSG #regex :pcre2bot: help
    my ($kernel, $heap, $who, $command, $message) = @_[KERNEL, HEAP, ARG0 .. ARG2];
    my $nick    = (split /!/, $who)[0];
    my $name    = (split /!/, $who)[1];
    my $channel = $command->[0];

    $heap->{channel} = $channel;
    $heap->{nick}    = "${nick}: ";

    parse_privmsg($kernel, $heap, $heap->{nick}, $channel, $message) if is_name_allowed($name);

    return;
}

# Reply to any private PRIVMSG that addresses the bot commands.
sub irc_msg
{
    # :ryoskzypu!~ryoskzypu@user/ryoskzypu PRIVMSG pcre2bot :pcre2bot: help
    my ($kernel, $heap, $who, undef, $message) = @_[KERNEL, HEAP, ARG0 .. ARG2];
    my $nick   = (split /!/, $who)[0];
    my $name   = (split /!/, $who)[1];

    $heap->{channel} = $nick;
    $heap->{nick}    = '';

    parse_privmsg($kernel, $heap, '', $nick, $message) if is_name_allowed($name);

    return;
}

# Log when someone is messaging pcre2bot and it has +g umode set (+g or +G on Libera
# and +g, +G, or +j on OFTC).
sub irc_718
{
    my ($server, $raw_msg, $msg_ref) = @_[ARG0 .. ARG2];
    my $nick     = $msg_ref->[0];
    my $fullname = $msg_ref->[1];
    my $message  = $msg_ref->[2];

    plog(1, 1, "$nick $fullname $message") if $log_path ne '';
    return;
}

# pcre2test subroutines

# Parse PRIVMSG before sending it to pcre2test.
#
# Usage:
#   trigger> /pattern/modifiers subject
#   "        s/pattern/replacement/modifiers subject
#
#   nick: command
#
# Modifiers are separated by a comma, also short modifiers are concatenated and
# put before long modifiers.
# Note that the same rules apply to subject modifiers '\=...'.
#
# Commands are put after the bot nick with an optional colon or comma suffix.
#
# Triggers:
#   re>        show default output
#   rec>       "    callouts
#   rev>       "    verbose callouts
#
# Commands:
#   help       show help
#   version    "    PCRE2 version
#
# Examples:
#   re> /(?<=ab)c/ abc
#   re> s/abc/<$0>/g abc
#   pcre2bot: version
#
# Notes:
#   - The trigger's pattern and subject must be separated by spaces '\x20', since
#     newlines on IRC terminates a message and IRC does not support multiline
#     messages in the original spec.
#
#     Thus the drawback is that modifiers cannot have spaces, specially the 'replace=...'
#     modifier, so a space must be escaped to be included, e.g. 'replace=some\ text'.
#     Commas are also not allowed and must be escaped aswell, because they are
#     modifiers separators.
#     The s/// syntax can be used to avoid these issues.
#     There are some problems to show a literal backslash before a space or comma,
#     but at this point just use s///.
#
#   - pcre2test trim leading and trailing spaces, so spaces need to be encoded
#     in hex notation to be included, e.g. '/ abc / \x20abc\x20'.
#
#   - To prevent spam, only one subject test is allowed per trigger invocation,
#     and pcre2test outputs that exceed the $max_lines variable are uploaded to
#     a pastebin service.
#     Ethically, the pastebin service should be hosted by the user.
#
#   - IRC messages must have a limit of 512 bytes according to the spec, thus the
#     tests are also limited.
#
#   - Newlines in the pattern are valid in pcre2test, but IRC is line oriented
#     and chats must not be spammed.
#     Also pcre2test interprets trailing newlines as subjects separators, so a
#     '\n' escape code must be used for multiline matches.
#
#   - See pcre2test(1) for more details.
#
# TODO:
#   - Make tests to assert if pcre2test can be abused or crash user's machine.
#     Perhaps limit some resources and modifiers to prevent abuse.
#   - Add a limitation on the pastebin service, to prevent abuse and blocking of
#     user's IP.
sub parse_privmsg
{
    my ($kernel, $heap, $nick, $channel, $message) = @_;
    my $pat_mods  = $def_pat_mods;
    my $subj_mods = $def_subj_mods;

    # Commands
    if ($message =~ /
                        \A
                        \Q$nickname\E[:,]?+
                        \x{20}
                        (?>
                            (?'cmd1' help) | (?'cmd2' version)
                        )
                        \z
                    /x) {
        if (defined $+{cmd1}) {
            $irc->yield(privmsg => $channel => "${nick}Usage: trigger> /pattern/mods subject; trigger> s/pattern/replace/mods subject; nick: command");
            $irc->yield(privmsg => $channel => "${nick}Triggers: re> (default output), rec> (callouts), rev> (verbose callouts)");
            $irc->yield(privmsg => $channel => "${nick}Commands: help (show help), version (PCRE2 version)");
            $irc->yield(privmsg => $channel => "${nick}E.g. re> /(?<=ab)c/ abc; re> s/abc/<\$0>/g abc; pcre2bot: version");
        }
        elsif (defined $+{cmd2}) {
            run_pcre2test($kernel, $heap, 1, '', '', '');
        }
    }
    # Triggers
    elsif ($message =~ /
                           \A
                           (?>
                               (?'trig1' rev) | (?'trig2' rec) | (?'trig3' re)
                           )
                           >(?'input'
                               \x{20}(?'re_input' [^\n]++)?+
                           )?+
                           \z
                       /x) {
        my $input;
        my $subst          = 0;
        my $delimiter      = '';
        my $pattern        = '';
        my $replacement    = '';
        my $pat_modifiers  = '';
        my $subject        = '';
        my $subj_modifiers = '';
        my $regexp;
        my $pos_line;

        # Set options modifiers

        # Verbose callouts
        if (defined $+{trig1}) {
            $pat_mods  .= ',auto_callout,info';
            $subj_mods .= ',callout_extra,substitute_callout';
            #$subj_mod .= ',callout_extra,callout_capture';

            $heap->{trigger} = 'verbose';
        }
        # Callouts
        elsif (defined $+{trig2}) {
            $pat_mods  .= ',auto_callout';
            $subj_mods .= ',substitute_callout';
            $heap->{trigger} = 'callouts';
        }
        # Default
        elsif (defined $+{trig3}) {
            $subj_mods .= ',callout_none';
            $heap->{trigger} = 'default';
        }

        if (defined $+{input}) {
            if (defined $+{re_input}) {
                $input = $+{re_input};
            }
            else {
                $irc->yield(privmsg => $channel => "${nick}missing pattern and subject");
                return;
            }
        } else {
            $irc->yield(privmsg => $channel => "${nick}missing pattern and subject");
            return;
        }

        # Get the regexp and subject from input.
        #
        # Note that pcre2test allows spaces in the modifiers list, but not here
        # since pattern and subjects must be separated by a space.
        #
        # TODO:
        #   - Restrict modifiers in an allow list that is configurable by the user,
        #     because some modifiers can potentially cause problems.
        #     Perhaps the single letter modifiers are enough, so check if there
        #     is a long modifier that could be useful. *OK*
        #
        #   - Decide if '\=...' subjects modifiers should be allowed. It can be
        #     disabled with the subject_literal modifier, however backslash interpretation
        #     will be disabled aswell. *OK*

        # Start of /pattern/modifiers
        {
            if ($input =~ m{
                              \A
                              \h*+
                              (?'delimiter' $delimiter_rgx)  # Pattern opening delimiter
                          }xgc) {
                $delimiter = $+{delimiter};
            }
            # Start of s/pattern/replacement/modifiers
            elsif ($input =~ m{
                                 \A
                                 \h*+
                                 s
                                 (?'delimiter' $delimiter_rgx)
                             }xgc) {
                $delimiter = $+{delimiter};
                $subst     = 1;
            }
            else {
                $irc->yield(privmsg => $channel => "${nick}invalid '${input}' pattern opening delimiter");
                return;
            }

            pdbg "\$delimiter: '${delimiter}'";

            # Position where the last global match ended.
            get_last_pos(\$input, 20);
        }

        # Pattern
        {
            if ($input =~ m{
                              \G
                              (?'pattern'
                                  (?> \\.
                                      | (?!$delimiter) [^\\]
                                  )*+
                              )
                          }xgc) {
                $pattern = $+{pattern};
            }

            if ($pattern eq '') {
                $irc->yield(privmsg => $channel => "${nick}missing pattern");
                return;
            } else {
                pdbg "\$pattern: '${pattern}'";
            }

            get_last_pos(\$input, 20);
        }

        # Pattern closing delimiter
        {
            if ($input !~ m{\G$delimiter}gc) {
                $irc->yield(privmsg => $channel => "${nick}missing or invalid pattern closing delimiter");
                return;
            } else {
                pdbg "\$delimiter: '${delimiter}'";
            }

            get_last_pos(\$input, 20);
        }

        # Replacement string in s/pattern/replacement/modifiers
        {
            if ($subst) {
                if ($input =~ m{
                                  \G
                                  (?'replacement'
                                      (?> \\[^\n]
                                          | (?!$delimiter) [^\\]
                                      )*+
                                  )
                              }xgc) {
                    $replacement = $+{replacement};
                }

                if ($replacement eq '') {
                    $irc->yield(privmsg => $channel => "${nick}missing replacement string");
                    return;
                } else {
                    pdbg "\$replacement: '${replacement}'";
                }

                get_last_pos(\$input, 20);

                # Replacement closing delimiter
                if ($input !~ m{\G$delimiter}gc) {
                    $irc->yield(privmsg => $channel => "${nick}missing or invalid replacement closing delimiter");
                    return;
                } else {
                    pdbg "\$delimiter: '${delimiter}'";
                }

                get_last_pos(\$input, 20);
            }
        }

        # Pattern modifiers
        {
            if ($input =~ m{
                              \G
                              (?'modifiers' (?&get_modifiers))?+ (?!$delimiter)

                              (?(DEFINE)
                                  # Single letter modifiers must be concatenated and come before longs.
                                  (?'get_modifiers'
                                      (?&modifier_short)
                                      (?> ,(?&modifier_long))*+
                                      |
                                      (?&modifier_long)
                                      (?> ,(?&modifier_long))*+
                                  )?+

                                  # See 'pcre2test -LM' and pcre2test(1) for the complete list.

                                  (?'modifier_short' $mod_short_rgx)

                                  (?'modifier_long'
                                      (?>
                                          -?
                                          \b
                                          (?>
                                              allow_empty_class | allow_lookaround_bsk | allow_surrogate_escapes | alt_bsux | alt_circumflex | alt_extended_class | alt_verbnames
                                              | anchored | ascii_all | ascii_bsd | ascii_bss | ascii_bsw | ascii_digit | ascii_posix | auto_callout | auto_possess_off | auto_possess
                                              | aftertext | allaftertext | allcaptures | allusedtext | allvector | altglobal
                                              | bad_escape_is_literal | bincode
                                              | callout_info | caseless_restrict | caseless | convert_length
                                              | debug | dollar_endonly | dotall | dotstar_anchor_off | dotstar_anchor | dupnames
                                              | endanchored | escaped_cr_is_lf | expand | extended_more | extended | extra_alt_bsux
                                              | firstline | framesize | fullbincode
                                              | global
                                              | hex | heapframes_size
                                              | info
                                              | jitverify | jitfast
                                              | literal
                                              | match_line | match_invalid_utf | match_unset_backref | match_word | mark
                                              | memory | multiline
                                              | never_backslash_c | never_callout | never_ucp | never_utf | no_auto_capture | no_auto_possess | no_bs0 | no_dotstar_anchor
                                              | no_start_optimize | no_utf_check | null_context | null_pattern
                                              | optimization_full | optimization_none
                                              | posix_nosub | posix | pushcopy | pushtablescopy | push | python_octal
                                              | start_optimize_off | start_optimize | subject_literal | startchar | substitute_callout | substitute_case_callout | substitute_extended
                                              | substitute_literal | substitute_matched | substitute_overflow_length | substitute_replacement_only
                                              | substitute_unknown_unset | substitute_unset_empty
                                              | turkish_casing
                                              | ucp | ungreedy | use_length | use_offset_limit | utf8_input | utf
                                          )
                                          \b
                                      )
                                      |
                                      # Modifiers that must contain a value.
                                      (?>
                                          \b
                                          bsr
                                          | callout_error | callout_fail | convert_glob_escape | convert_glob_separator | convert | copy
                                          | get
                                          | heap_limit
                                          | jitstack | jit
                                          | locale
                                          | match_limit | max_pattern_compiled_length | max_pattern_length | max_varlookbehind
                                          | newline
                                          | offset_limit | offset | ovector
                                          | parens_nest_limit | posix_startend
                                          | recursion_limit | regerror_buffsize | replace
                                          | substitute_skip | substitute_stop | stackguard | startoffset
                                          | tables
                                          \b
                                      )
                                      =
                                      # Allows '\ ' in 'replace=foo\ bar\ baz' to be included.
                                      # Also '\,' in 'replace=foo\,bar\,baz'.
                                      (?> (?!$delimiter)[^,\s\\]
                                          | \\[^\n,] | \\,
                                      )*+
                                      |
                                      # Force a failure if nothing matches.
                                      (*COMMIT)(*FAIL)
                                  )
                              )
                          }xgc) {
                $pat_modifiers = $+{modifiers};
            }

            # Get the string from the last match position, which are the modifiers.
            $pos_line = get_last_pos(\$input, 50);

            # Error out only on invalid modifiers, so empty modifiers are accepted.
            if ($pat_modifiers eq '' && $pos_line ne '' && $pos_line !~ /^\x{20}/) {
                $irc->yield(privmsg => $channel => "${nick}invalid pattern '${pos_line}' modifiers");
                return;
            } else {
                pdbg "\$pat_modifiers: '${pat_modifiers}'\n";
            }

            # Check if a pattern modifier is in the allow list.
            if ($pat_modifiers ne '') {
                return unless check_modifiers($channel, $nick, \@pat_mods_allow, $pat_modifiers);
            }

            # s/// replacement has priority over the 'replace' modifier, so skip this
            # process on s///.
            if (! $subst) {
                # Parse the 'replace' modifier value.
                $pat_modifiers = parse_replace_mod($pat_modifiers);

                pdbg "\$pat_modifiers: '${pat_modifiers}'";

                $regexp = "${delimiter}${pattern}${delimiter}$pat_modifiers";
            }
            else {
                # Parse the s/// replacement string.
                if ($replacement =~ /,/) {
                    # Replace all commas with a unique escape char '\034'.
                    if ($replacement =~ s/,/\o{034}/g) {
                        $conv_uniq = 1;
                        pdbg "\$replacement: '${replacement}'";
                    }
                }

                $regexp = "${delimiter}${pattern}${delimiter}${pat_modifiers},replace=${replacement}";
            }

            pdbg "\$regexp: '${regexp}'\n";
        }

        # End of /pattern/modifiers or /s/pattern/replacement/modifiers;
        # Start of subject string
        {
            if ($subj_literal && $input =~ m{
                                               \G
                                               # Do not validate subject modifiers
                                               (?>
                                                   \x{20}++
                                                   (?'subject'[^\n]++)
                                               )?+
                                               \z
                                           }xgc) {
                $subject = $+{subject};
            }
            elsif (! $subj_literal && $input =~ m{
                                                    \G
                                                    # Validate subject modifiers in '\=...'
                                                    (?>
                                                        \x{20}++
                                                        (?'subject' (?> (?!\\=)[^\n])*+)
                                                        (?>
                                                            \\=
                                                            (?'modifiers' (?&get_modifiers))?+
                                                        )?+
                                                    )?+

                                                   (?(DEFINE)
                                                       # Single letter modifiers must be concatenated and come before longs.
                                                       (?'get_modifiers'
                                                           (?&modifier_short)
                                                           (?> ,(?&modifier_long))*+
                                                           |
                                                           (?&modifier_long)
                                                           (?> ,(?&modifier_long))*+
                                                       )?+

                                                       # See 'pcre2test -LM' and pcre2test(1) for the complete list.

                                                       (?'modifier_short' \b[g]++\b)

                                                       (?'modifier_long'
                                                           (?>
                                                               -?
                                                               \b
                                                               (?>
                                                                   anchored | aftertext | allaftertext | allcaptures | allusedtext | allvector | altglobal
                                                                   | callout_capture | callout_extra | callout_no_where | callout_none | copy_matched_subject
                                                                   | endanchored
                                                                   | dfa_restart | dfa_shortest | dfa | disable_recurseloop_check
                                                                   | find_limits_noheap | find_limits
                                                                   | heapframes_size
                                                                   | mark | memory
                                                                   | no_jit | no_utf_check | notbol | notempty | notempty_atstart | noteol | null_context | null_replacement | null_subject
                                                                   | partial_hard | partial_soft | ph | ps
                                                                   | global | getall
                                                                   | heapframes_size
                                                                   | mark
                                                                   | startchar | substitute_callout | substitute_case_callout | substitute_extended | substitute_literal | substitute_matched
                                                                   | substitute_overflow_length | substitute_replacement_only | substitute_unknown_unset | substitute_unset_empty
                                                                   | zero_terminate
                                                               )
                                                               \b
                                                           )
                                                           |
                                                           # Modifiers that must contain a value.
                                                           (?>
                                                               \b
                                                                   callout_data | callout_error | callout_fail | copy
                                                                   | depth_limit
                                                                   | get
                                                                   | heap_limit
                                                                   | jitstack
                                                                   | match_limit
                                                                   | offset_limit | offset | ovector
                                                                   | recursion_limit | replace
                                                                   | substitute_skip | substitute_stop | startoffset
                                                               \b
                                                           )
                                                           =
                                                           # Allows '\ ' in 'replace=foo\ bar\ baz' to be included.
                                                           # Also '\,' in 'replace=foo\,bar\,baz'.
                                                           (?> [^,\s\\]++ | \\[^\n,] | \\,)++
                                                       )
                                                    )
                                                    \z
                                                }xgc) {
                $subject        = $+{subject};
                $subj_modifiers = $+{modifiers} // '';
            }

            # Get the string from the last match position, which are the modifiers.
            $pos_line = get_last_pos(\$input, 50);

            # Error out only on invalid subject modifiers.
            if ($subj_modifiers eq '' && $pos_line ne '') {
                $irc->yield(privmsg => $channel => "${nick}invalid subject '${pos_line}' modifiers");
                return;
            } else {
                pdbg "\$subj_modifiers: '${subj_modifiers}'\n";
            }

            # Check if a subject modifier is in the allow list.
            if ($subj_modifiers ne '') {
                return unless check_modifiers($channel, $nick, \@subj_mods_allow, $subj_modifiers);
            }

            # Parse the 'replace' modifier value.
            $subj_modifiers = parse_replace_mod($subj_modifiers);
            pdbg "\$subj_modifiers: '${subj_modifiers}'";

            if ($subject eq '') {
                $irc->yield(privmsg => $channel => "${nick}missing subject string");
                return;
            } else {
                pdbg "\$subject:        '${subject}'";
                pdbg "\$subj_modifiers: '${subj_modifiers}'\n";
            }

            get_last_pos(\$input, 20);

            if ($subj_modifiers ne '') {
                $subject = "${subject}\\=$subj_modifiers";
                pdbg "\$subject:        '${subject}'";
            }
        }

        $subst        = 0;
        $subj_literal = 0;

        # Construct a single test that is a valid pcre2test input.
        $input = <<~_;
            $regexp
            $subject
            _

        # Send input to pcre2test's STDIN.
        run_pcre2test($kernel, $heap, 0, $pat_mods, $subj_mods, $input);
    }
}

# Parse the 'replace=...' modifier value.
sub parse_replace_mod
{
    my ($modifiers) = @_;

    if ($modifiers =~ /\breplace=\K(?> \\[^\n] | (?!\\)[^\x{20},])++/x) {
        my $match     = $&;
        my $match_len = length $match;
        my $start     = $-[0];
        my $end       = $+[0];

        pdbg "\$match:       '${match}'";
        pdbg "\$match_len:    ${match_len}";
        pdbg "\$start,\$end: '${start},${end}\n";

        # Replace all escaped commas with a unique escape char '\034'.
        if ($match =~ s/\\,/\o{034}/g) {
            $conv_uniq = 1;
            pdbg "\$match:       '${match}'";
        }

        # Replace all escaped spaces '\ ' with a space.
        my $replace = $match =~ s/\\(\x{20})/$1/gr;
        my $replaced = substr $modifiers, $start, $match_len, $replace;

        pdbg "\$replace:     '${replace}'";
        pdbg "\$replaced:    '${replaced}'\n";
    }

    return $modifiers;
}

# Check if a modifier from pattern/subject modifiers is allowed to be used.
sub check_modifiers
{
    my ($channel, $nick, $list, $modifiers)  = @_;
    my @split_mods = split /(?<!\\),/, $modifiers;

    pdump('@split_mods', \@split_mods);

    if ($list->@*) {
        # Check short modifiers.
        if ($split_mods[0] =~ /
                                  $mod_short_rgx
                                  |
                                  # Force a failure on backtracking, so strings like 'replace=x'
                                  # will not match a short modifier.
                                  (*COMMIT)(*FAIL)
                              /x) {
            pdbg "'$split_mods[0]' is a short modifier.";

            foreach my $i (split //, $split_mods[0]) {
                pdbg "\$i: '${i}'";

                if (! grep { $_ eq $i } $list->@*) {
                    pdbg "Short modifier '${i}' is not in allow list.";
                    $irc->yield(privmsg => $channel => "${nick}short '${i}' modifier is not allowed");

                    return 0;
                }
            }
            shift @split_mods;
        }
    }

    # Check long modifiers.
    foreach my $i (@split_mods) {
        $i =~ s/=[^\n]++\z//g;

        if ($i eq 'subject_literal') {
            pdbg 'subject_literal pattern modifier is found.';
            $subj_literal = 1;
        }

        if ($list->@* && ! grep { $_ eq $i } $list->@*) {
            pdbg "Modifier '${i}' is not in allow list.";
            $irc->yield(privmsg => $channel => "${nick}long '${i}' modifier is not allowed");

            return 0;
        }
    }

    return 1;
}

# Get the position where the last regexp global match ended for the variable.
sub get_last_pos
{
    my ($var, $len) = @_;
    my $last_pos    = pos $var->$*;

    if (defined $last_pos && defined $len) {
        my $pos_line = unpack "x$last_pos a$len", $var->$*;

        if (defined $pos_line) {
            pdbg "\$last_pos:  ${last_pos}";
            pdbg "\$pos_line: '${pos_line}'\n";

            return $pos_line;
        }
    }
}

# Run pcre2test
sub run_pcre2test
{
    my ($kernel, $heap, $version, $pat_mods, $subj_mods, $input) = @_;
    my $program;

    if ($version) {
        $program = ['pcre2test', '-q', '--version'];
    }
    else {
        $program = ['pcre2test', '-q', '-pattern', $pat_mods, '-subject', $subj_mods];
    }

    my $child = POE::Wheel::Run->new(
        Program     => $program,
        StdoutEvent => 'got_child_stdout',
        StderrEvent => 'got_child_stderr',
        CloseEvent  => 'got_child_close',
    );
    my $child_pid = $child->PID;
    my $child_id  = $child->ID;

    # Send input to pcre2test.
    $child->put($input);

    $kernel->sig_child($child_pid, 'got_child_signal');

    # Wheel events include the wheel's ID.
    $heap->{children_by_wid}{$child_id} = $child;

    # Signal events include the process ID.
    $heap->{children_by_pid}{$child_pid} = $child;

    pdbg "Child PID $child_pid started as wheel ${child_id}.";
}

# Upload pcre2test's output to a pastebin service.
sub get_pastebin
{
    my ($input) = @_;

    if ($primary_service eq '') {
        pdbg 'Primary pastebin service is not set.';
        return;
    }

    $poe_kernel->post('curl', 'request', '_response', POST(
            $primary_service,
            Content_Type => 'form-data',
            Content => [
                'file' => [undef, 'filename', Content_Type => 'text/plain', Content => $input],
            ]
    ));

    return;
}

sub set_dumper
{
    $Data::Dumper::Terse = 1;
    $Data::Dumper::Useqq = 1;

    # Sort Dumper keys by numeric or alphabetic order.
    $Data::Dumper::Sortkeys = sub
    {
        my $hash = shift;

        return [
            join('', keys $hash->%*) =~ /\A\d+\z/ ? sort { $a <=> $b } keys $hash->%*
                                                  : sort keys $hash->%*
        ];
    };
}

sub set_options
{
    # Transform options warn messages.
    local $SIG{__WARN__} = sub {
        chomp (my $msg = shift);

        if ($msg =~ /\AUse of uninitialized value /) {
            print $msg;
            return;
        }

        $msg =~ tr/"/'/;
        err 2, "\L$msg\E";
    };

    GetOptions(
        'debug|d'   => \$debug,
        'help|h'    => sub { print $usage; exit 0 },
        'pass|p'    => \$pass,
        'version|v' => sub { print "$prog ${prog_ver}\n"; exit 0 },
    );

    if ($pass) {
        # Non-interactive STDIN
        if (! -t STDIN) {
            chomp ($nickserv_pass = <STDIN>);
        }
        # STDIN is opened to a TTY.
        else {
            print 'Enter NickServ password: ';

            # Disable TTY echo.
            system('/usr/bin/stty', '-echo'); die $! if ($? >> 8) > 0;

            chomp ($nickserv_pass = <STDIN>);

            system('/usr/bin/stty', 'echo'); die $! if ($? >> 8) > 0;
            print "\n";
        }
    }
}

# Configuration

# Initialize config file.
sub init_config
{
    my $config_file = shift @ARGV or err 2, 'missing config file argument';
    err 2, 'config file does not exist' unless -e $config_file;
    open my $fh, '<', $config_file or err 1, "failed to open $config_file";

    # Decode TOML config.

    my $toml = do { local $/; <$fh> };
    close $fh or warn $!;
    ($config, my $error) = from_toml($toml);

    if ($error ne '') {
        chomp $error;
        err 1, "failed to decode config file\n$error";
    }

    print '$config = ' . Dumper $config if $debug;
}

# Set config TLS variable and check its certificate.
sub set_config_tls
{
    $tls      = $config->{server}->{use_tls};
    $tls_cert = $config->{server}->{tls_cert};
    $tls_key  = $config->{server}->{tls_key};

    if ($tls_cert ne '' && $tls_key eq '') {
        err 1, 'missing certificate key';
    }
    elsif ($tls_key ne '' && $tls_cert eq '') {
        err 1, 'missing certificate';
    }
    elsif ($tls_cert ne '' && $tls_key ne '') {
        err 1, "'tls' key value must be set to 1" unless $tls;
        err 2, 'NickServ password is unnecessary with a TLS cert' if $pass && $nickserv_pass ne '';
    }
}

# Get environment variables.
sub get_env_vars
{
    if (defined $ENV{NICKSERV_PASS} && $nickserv_pass eq '' && $tls_cert eq '') {
        print "Getting NICKSERV_PASS environment variable.\n" if $debug;
        $nickserv_pass = $ENV{NICKSERV_PASS};
    }
}

# Set config variables.
sub set_config_vars
{
    $nickname      = $config->{server}->{nickname};
    $username      = $config->{server}->{username};
    $ircname       = $config->{server}->{ircname};
    $usermode      = $config->{server}->{usermode};
    $server        = $config->{server}->{server};
    $port          = $config->{server}->{port};
    $log_path      = $config->{server}->{log_path};
    $log_private   = $config->{server}->{log_private};
    $log_public    = $config->{server}->{log_public};
    $nickserv_pass = $config->{server}->{nickserv_password} if $nickserv_pass eq '' && $tls_cert eq '';
    @channels      = ($config->{server}->{channels}->@*);

    # Name lists (~username@host)
    @names_allow  = ($config->{server}->{names_allow}->@*);
    @names_ignore = ($config->{server}->{names_ignore}->@*);

    # Default options modifiers
    $def_pat_mods  = $config->{pcre2test}->{pattern_modifiers};
    $def_subj_mods = $config->{pcre2test}->{subject_modifiers};

    # Modifiers allow lists
    @pat_mods_allow  = ($config->{pcre2test}->{pattern_mods_allow}->@*);
    @subj_mods_allow = ($config->{pcre2test}->{subject_mods_allow}->@*);

    # Pastebin services
    $max_lines         = $config->{pcre2test}->{max_lines};
    $primary_service   = $config->{pcre2test}->{primary_service};
    @fallback_services = ($config->{pcre2test}->{fallback_services}->@*);
}

# Open the log filehandle if config asks to log.
sub check_log
{
    if ($log_path ne '') {
        my $filepath = $log_path =~ s|/\z||r;  # Trim trailing slash.
        open $log_fh, '>>', "${filepath}/pcre2bot.log" or err 1, 'failed to open log filehandle';
    }
}

# Check if pcre2test is installed on user's system.
sub check_pcre2test
{
    # Exit with an error if pcre2test is not found on $PATH.
    system '/bin/sh', '-c', "command -v pcre2test > /dev/null";

    err 1, 'pcre2test is not installed' if (($? >> 8) > 0);
}

# POE

# Initialize POE framework objects.
sub init_poe
{
    my %opts = (
        Nick     => $nickname,
        Username => $username,
        Ircname  => $ircname,
        Server   => $server,
        Port     => $port,
        UseSSL   => $tls,
        SSLCert  => $tls_cert,
        SSLKey   => $tls_key,
        Raw      => 1,
    );

    # Create a PoCo-IRC object.
    $irc = POE::Component::IRC::State->spawn(
        %opts,
        #WhoJoiners => 0,
    ) or die "failed to create PoCo-IRC object $!";

    print "$nickname ${server}\n";
    print $irc->VERSION, "\n";

    # Create a PoCo-IRC session.
    POE::Session->create(
        package_states => [
            main => [
                qw<
                    _start
                    _default
                    _response
                    rl_handle_input
                    irc_raw
                    irc_raw_out
                    irc_connected
                    irc_001
                    irc_identified
                    irc_whois
                    irc_mode
                    irc_join
                    irc_part
                    irc_quit
                    irc_kick
                    irc_nick
                    irc_ctcp
                    irc_invite
                    irc_shutdown
                    irc_disconnected
                    irc_error
                    irc_socketerr
                    irc_plugin_error
                    irc_public
                    irc_msg
                    irc_718
                    got_child_stdout
                    got_child_stderr
                    got_child_close
                    got_child_signal
                >
            ],
        ],

        heap => {irc => $irc},
    ) or die "failed to create PoCo-IRC session $!";

    # Create a PoCo-Curl object.
    $curl = POE::Component::Curl::Multi->spawn(
        alias           => 'curl',
        timeout         => 15,
        agent           => 'curl/8.12.1',
        max_concurrency => 10,
    ) or die "failed to create PoCo-Curl object $!";
}

END {
    $irc->yield(unregister => 'all');
    print "\n";  # Get rid of unterminated '> ' prompt.
}

# Main
set_dumper();
set_options();
init_config();
set_config_tls();
get_env_vars();
set_config_vars();
check_log();
check_pcre2test();
init_poe();
$poe_kernel->run();
